{
  "hash": "81a84a0aebd2947c77a3d0333536b65e",
  "result": {
    "markdown": "---\ntitle: \"Outbreak Simulator on Falcon!\"\ndescription: \"Headless mode allows for many replicates!\"\ncode-fold: true  \ncode-tools: true\n---\n\n\n\n\n## Welcome\n\nThis is a demo scenario for Outbreak Simulator.  A complete description of the project can be found [here](https://professorpolymorphic.github.io/PolymorphicWeb/Games/OutbreakSimulator/) \n\n\n## GRAPH INTERPRETATION\n\n### Epicurve\n\nThe following graph is an Epidemiological Curve using data from 20 runs of Outbreak Simulator.  It shows the number of people in the various categories of the epidemiological compartment model under two conditions - Airports on and off.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_list1 <- list.files(pattern = \"*Walk.*\\\\.csv$\") \nfile_list2 <- list.files(pattern = \"*Fly.*\\\\.csv$\")\n\n\ndf1 <- file_list1 %>% \n  map_df(~read_csv(., show_col_types = FALSE) %>%\n           mutate(source_file = .x, Airports = \"OFF\")) \n\ndf2 <- file_list2 %>% \n  map_df(~read_csv(., show_col_types = FALSE) %>%\n           mutate(source_file = .x, Airports = \"ON\")) \n\ndf <- rbind(df1, df2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<-df%>%\n  mutate_at(c(1:295), as.numeric)\n\ndftotal <- df%>%\n  select(Time, source_file, Airports, starts_with(\"Totals_\"))%>%\n  rename(Time=Time,\n          S=Totals_S,\n         E=Totals_E,\n         V=Totals_V,\n         I=Totals_I,\n         R=Totals_R,\n         D=Totals_D,\n         source_file=source_file,\n         Airports = Airports)\n\nfor (i in 1:length(dftotal$Time)){\n  \n  dftotal$dS[i] <- dftotal$S[i]-dftotal$S[i+1]\n  dftotal$dR[i] <- dftotal$R[i+1]-dftotal$R[i]\n  dftotal$dI[i] <- dftotal$I[i+1]-dftotal$I[i]\n  dftotal$dD[i] <- dftotal$D[i+1]-dftotal$D[i]\n\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `dS`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `dR`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `dI`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `dD`.\n```\n:::\n\n```{.r .cell-code}\ndftotal<- dftotal%>%\n  mutate(N= S+E+I+V+R+D)%>%\n  mutate(Beta = dS*N/(S*I+1))%>%\n  mutate(Gamma = dD/(I+1))%>%\n  mutate(R0 = Beta/Gamma)%>%\n  filter(Beta<10)%>%\n  filter(R0<10^3)\n\ndflong<-dftotal%>%\n  pivot_longer(cols = c(\"S\", \"E\", \"I\",\n                        \"V\", \"R\", \"D\"),names_to = \"Compartment\", values_to = \"Count\")\n\ndflong <- dflong%>%\n  mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSus<-dflong%>%\n  filter(Compartment == \"Susceptible\")\n\nggplot(dflong, aes(x=Time, y = Count/10^6,  color=as.factor(Compartment)))+\n  geom_smooth()+\n  geom_point(size=0.1, alpha=0.1)+\n \n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from 20 runs of Outbreak Simulator.\",\n    tag = \"Figure 1\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")+\n  facet_wrap(~Airports)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Computation failed in `stat_smooth()`\nComputation failed in `stat_smooth()`\nCaused by error in `gam.reparam()`:\n! NA/NaN/Inf in foreign function call (arg 3)\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## But what about..... STATES????\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstateslong <- df %>%\n  pivot_longer(cols = 2:295,\n               names_to = c(\"State\", \"Compartment\"),\n  names_pattern = \"(.+?)_(.)\",\n  values_to = \"Count\")\n\nfewerstates<-stateslong%>%\n  filter(State == \"Washington\" | State == \"Idaho\"\n         | State ==\"California\" | State == \"Oregon\"\n         )%>%\n    mutate(Compartment = recode(Compartment, \n         S = \"Susceptible\",\n         E = \"Exposed\",\n         I = \"Infected\",\n         V = \"Vaccinated\",\n         R = \"Recovered\",\n         D = \"Deceased\"))%>%\n  filter(Compartment != \"Vaccinated\")\n\n\nggplot(fewerstates, aes(x=Time, y = Count/10^6, color = Compartment))+\n  geom_point(size=0.1, alpha=0.1)+\n  facet_grid(State~Airports)+\n   labs(\n    title = \"Epidemiological Curve\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from 20 run2 of Outbreak Simulator.\",\n    tag = \"Figure 2\",\n    x = \"Time (h)\",\n    y = \"Number of Individuals (millions)\",\n    colour = \"Compartment\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## SUPER ADVANCED EPIDEMIOLOGY\n\nReal time R0 calculations.\n\nR0, also known as the basic reproduction number, is a measure of the average number of secondary infections produced by a single infectious individual in a completely susceptible population. Calculating R0 from time series values of S (Susceptible), I (Infected), and R (Recovered) can be done using a mathematical model, such as the Susceptible-Infected-Recovered (SIR) model.\n\nThe SIR model is a set of ordinary differential equations that describe the dynamics of infectious diseases. The equations are:\n\ndS/dt = -β * S * I / N\ndI/dt = β * S * I / N - γ * I\ndR/dt = γ * I\nwhere:\n\nS is the number of susceptible individuals\nI is the number of infected individuals\nR is the number of recovered individuals\nN is the total population (N = S + I + R)\nβ (beta) is the transmission rate per contact\nγ (gamma) is the recovery rate\nThe basic reproduction number R0 is given by the formula:\n\nR0 = β / γ\n\nIn order to calculate R0 from time series data of S, I, and R, you'll need to estimate the values of β and γ. One way to do this is to use curve-fitting techniques to fit the SIR model to your data. Once you have estimates for β and γ, you can calculate R0 using the formula above.\n\nHere's an example using R and the deSolve package to fit the SIR model to sample data and estimate R0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dflong, aes(x=Time, y= R0))+\n  geom_smooth()+\n  labs(\n    title = \"Basic Reproduction Rate\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 3\",\n    x = \"Time (h)\",\n    y = \"R0\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")+\n  geom_hline(yintercept = 1, color = \"red\", linetype = 3)+\n  facet_wrap(~Airports)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(dflong, aes(x=Time, y= Beta))+\n  geom_smooth()+\n  labs(\n    title = \"SIR parameters: Beta\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 4\",\n    x = \"Time (h)\",\n    y = \"Parameter Estimate\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")+\n  geom_hline(yintercept = .5, color = \"red\", linetype = 3)+\n  facet_wrap(~Airports)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(dflong, aes(x=Time, y= Gamma))+\n  geom_smooth()+\n  labs(\n    title = \"SIR parameters: Gamma\",\n    subtitle = \"H1N1 Influenza\",\n    caption = \"Data from a single run of Outbreak Simulator.\",\n    tag = \"Figure 4\",\n    x = \"Time (h)\",\n    y = \"Parameter Estimate\"\n  )+\n   scale_colour_brewer(type = \"seq\", palette = \"Spectral\")+\n  geom_hline(yintercept = 0, color = \"red\", linetype = 3)+\n  facet_wrap(~Airports)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}